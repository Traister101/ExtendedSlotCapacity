import org.spongepowered.asm.gradle.plugins.struct.DynamicProperties

plugins {
    id "idea"
    id "java"
    id("maven-publish")
    id("net.minecraftforge.gradle") version "[6.0,6.2)"
    id("org.parchmentmc.librarian.forgegradle") version "1.+"
    id("org.spongepowered.mixin") version "0.7.+"
}

file("./dev.gradle").createNewFile()
apply {
    from "dev.gradle"
}

final modID = "esc"
final modName = "Extended-Slot-Capacity"
final minecraftVersion = "1.20.1"
final forgeVersion = "47.1.3"
final lombokVersion = "1.18.32"
final mouseTweaksFileId = "5338457"

final mappingsChannel = project.findProperty("mappings_channel") as String ?: "official"
final mappingsVersion = project.findProperty("mappings_version") as String ?: minecraftVersion
final modVersion = System.getenv("VERSION") ?: "0.0.0-indev"

base {
    archivesName.set("$modName-$minecraftVersion")
    group = "mod.traister101" // http://maven.apache.org/guides/mini/guide-naming-conventions.html
    version = modVersion
}

java {
    // Mojang ships Java 17 to end users in 1.18+, so your mod should target Java 17.
    toolchain.languageVersion.set(JavaLanguageVersion.of(17))
    withJavadocJar()
    withSourcesJar()
}

println("Java: ${System.getProperty("java.version")}, JVM: ${System.getProperty("java.vm.version")} (${System.getProperty("java.vendor")}), Arch: ${System.getProperty("os.arch")}")
println("Using mappings $mappingsChannel / $mappingsVersion with version $modVersion")

sourceSets.create("testmod")

configurations {
    testmodCompileClasspath.extendsFrom(compileClasspath)
    testmodRuntimeClasspath.extendsFrom(runtimeClasspath)
}

mixin {
    add(sourceSets.main, "extended-slot-capacity.refmap.json")
    config("extended-slot-capacity.mixins.json")

    (debug as DynamicProperties).propertyMissing("verbose", true)
    (debug as DynamicProperties).propertyMissing("export", true)
    overwriteErrorLevel = "error"
    hotSwap = true
}

minecraft {
    mappings(mappingsChannel, mappingsVersion)

    runs {
        all {
            property("forge.logging.markers", "REGISTRIES")
            property("forge.logging.console.level", "debug")

            // Mixin is stupid
            property("mixin.env.remapRefMap", "true")
            property("mixin.env.refMapRemappingFile", "$projectDir/build/createSrgToMcp/output.srg")

            mods {
                "$modID" {
                    source(sourceSets.main)
                }
            }
        }

        register("client") {
            workingDirectory(file("run/client"))

            jvmArgs("-ea", "-Xmx4G", "-Xms4G")

            property("forge.enabledGameTestNamespaces", modID)
        }

        register("testmodClient") {
            parent(runs["client"])

            ideaModule("${project.name.replace(' ', '_')}.testmod")

            mods {
                "testmod" {
                    source(sourceSets.testmod)
                }
            }
        }

        register("server") {
            workingDirectory(file("run/server"))

            args("-nogui")
        }
    }
}

repositories {
    maven {
        name = "Curse maven"
        url = uri("https://www.cursemaven.com")
        content {
            includeGroup("curse.maven")
        }
    }
}

dependencies {
    //noinspection VulnerableLibrariesLocal
    minecraft("net.minecraftforge:forge:$minecraftVersion-$forgeVersion")

    "testmodImplementation"(sourceSets.main.output)

    // Lombok cause why not
    compileOnly("org.projectlombok:lombok:$lombokVersion")
    annotationProcessor("org.projectlombok:lombok:$lombokVersion")

    // Mixin annotation processor
    annotationProcessor("org.spongepowered:mixin:0.8.5:processor")

    // Mouse Tweaks to make sure we are compatible
    compileOnly(fg.deobf("curse.maven:mouse-tweaks-60089:$mouseTweaksFileId"))
    runtimeOnly(fg.deobf("curse.maven:mouse-tweaks-60089:$mouseTweaksFileId"))
}

idea {
    module {
        downloadJavadoc = true
        downloadSources = true

        // Add directory exlusions
        ["run", ".gradle", "build", ".idea", "gradle", "resources/venv", "resources/.idea"].forEach { excludeDirs.add(file(it)) }
    }
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            groupId(project.group)
            artifactId(project.archivesBaseName)
            version(project.version)

            artifact(jar)
            artifact(sourcesJar)
        }
    }

    repositories {
        maven {
            name = "Project"
            url = uri("file://${project.projectDir}/mcmodsrepo")
        }
        maven {
            name = "GitHubPackages"
            url = uri("https://maven.pkg.github.com/traister101/ExtendedSlotCapacity")
            credentials {
                username = System.getenv("GITHUB_ACTOR")
                password = System.getenv("GITHUB_TOKEN")
            }
        }
    }
}

jar {
    manifest {
        attributes["Implementation-Version"] = project.version
    }

    finalizedBy("reobfJar")
}

javadoc {
    source = sourceSets.main.allJava
    options.optionFiles(file("javadoc-options.txt"))
    options.encoding = "UTF-8"
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = "UTF-8"
    options.compilerArgs.addAll(["-Xlint:all,-processing", "-Werror"])
}
