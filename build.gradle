buildscript {
    repositories {
        // These repositories are only for Gradle plugins, put any other repositories in the repository block further below
        maven { url = "https://maven.minecraftforge.net" }
        maven { url = "https://maven.parchmentmc.org" }
        maven { url = "https://repo.spongepowered.org/maven" }
        maven {
            url "https://repo.spongepowered.org/repository/maven-public/"
            content { includeGroup "org.spongepowered" }
        }
        mavenCentral()
    }
    dependencies {
        classpath group: "net.minecraftforge.gradle", name: "ForgeGradle", version: "6.0.+", changing: true
        classpath "org.parchmentmc:librarian:1.+"
    }
}

plugins {
    id "idea"
    id "java"
    id "eclipse"
    id "maven-publish"
}

apply plugin: "net.minecraftforge.gradle"
apply plugin: "org.parchmentmc.librarian.forgegradle"

file("./dev.gradle").createNewFile()
apply {
    from("dev.gradle")
}

final String mappingsChannel = project.findProperty("mappings_channel") as String ?: "official"
final String mappingsVersion = project.findProperty("mappings_version") as String ?: minecraftVersion
final String modVersion = System.getenv("VERSION") ?: "0.0.0-indev"

base {
    archivesName.set("$modName-$minecraftVersion")
    group = "mod.traister101" // http://maven.apache.org/guides/mini/guide-naming-conventions.html
    version = modVersion
}

java {
    // Mojang ships Java 17 to end users in 1.18+, so your mod should target Java 17.
    toolchain.languageVersion = JavaLanguageVersion.of(17)
    withJavadocJar()
    withSourcesJar()
}

println "Java: ${System.getProperty "java.version"}, JVM: ${System.getProperty "java.vm.version"} (${System.getProperty "java.vendor"}), Arch: ${System.getProperty "os.arch"}"
println "Using mappings $mappingsChannel / $mappingsVersion with version $modVersion"

minecraft {
    mappings channel: mappingsChannel, version: mappingsVersion

    accessTransformer = file("src/main/resources/META-INF/accesstransformer.cfg")

    runs {
        configureEach {
            property "forge.logging.markers", "REGISTRIES"
            property "forge.logging.console.level", "debug"

            mods {
                "$modID" {
                    source sourceSets.main
                }
            }
        }

        client {
            workingDirectory file("run/client")

            jvmArgs "-ea", "-Xmx4G", "-Xms4G"

            property "forge.enabledGameTestNamespaces", modID
        }

        server {
            workingDirectory file("run/server")

            args "-nogui"
        }
    }
}

repositories {
    mavenLocal()
}

dependencies {
    //noinspection VulnerableLibrariesLocal  we can"t do anything about these so make it shut up
    minecraft("net.minecraftforge:forge:$minecraftVersion-$forgeVersion")
}

jar {
    manifest {
        attributes(["Specification-Title"     : modName,
                    "Specification-Vendor"    : "traister101",
                    "Specification-Version"   : project.jar.archiveVersion,
                    "Implementation-Title"    : project.name,
                    "Implementation-Version"  : project.jar.archiveVersion,
                    "Implementation-Vendor"   : "traister101",
                    "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")])
    }

    finalizedBy("reobfJar")
}

idea {
    module {
        downloadJavadoc = true
        downloadSources = true

        // Add directory exlusions
        ["run", ".gradle", "build", ".idea", "gradle", "resources/venv", "resources/.idea"].forEach { excludeDirs.add(file(it)) }
    }
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            groupId project.group
            artifactId project.archivesBaseName
            version project.version
            artifact jar
            artifact sourcesJar
        }
    }

    repositories {
        maven {
            url "file://${project.projectDir}/mcmodsrepo"
        }
        maven {
            name = "GitHubPackages"
            url = uri("https://maven.pkg.github.com/traister101/ExtendedSlotCapacity")
            credentials {
                username = System.getenv("GITHUB_ACTOR")
                password = System.getenv("GITHUB_TOKEN")
            }
        }
    }
}

javadoc {
    source = sourceSets.main.allJava
    options.optionFiles(file("javadoc-options.txt"))
    options.encoding = "UTF-8"
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = "UTF-8" // Use the UTF-8 charset for Java compilation
//    options.compilerArgs << "-Xlint:all,-processing" << "-Werror"
}